<?xml version="1.0"?>
<analyzerinfo checksum="356203547">
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;FileDescriptor::readFS&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;FileDescriptor::readFS&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to a unnamed namespace." cwe="398" inconclusive="true" file0="src/filedescriptor.cpp">
            <location file="src/include/filedescriptor.hpp" line="21" column="10"/>
            <location file="src/filedescriptor.cpp" line="36" column="22"/>
            <symbol>FileDescriptor::readFS</symbol>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_name&apos; should be passed by const reference." verbose="Parameter &apos;p_name&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="src/filedescriptor.cpp">
            <location file="src/filedescriptor.cpp" line="36" column="43"/>
            <symbol>p_name</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;status_exit&apos; is assigned a value that is never used." verbose="Variable &apos;status_exit&apos; is assigned a value that is never used." cwe="563" file0="src/filedescriptor.cpp">
            <location file="src/filedescriptor.cpp" line="69" column="19"/>
            <symbol>status_exit</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;status_exit&apos; is assigned a value that is never used." verbose="Variable &apos;status_exit&apos; is assigned a value that is never used." cwe="563" file0="src/filedescriptor.cpp">
            <location file="src/filedescriptor.cpp" line="77" column="17"/>
            <symbol>status_exit</symbol>
        </error>
  <FileInfo check="Class">
<class name="FileDescriptor" file="src/include/filedescriptor.hpp" line="15" col="1" hash="12180384591123048931"/>
<class name="maps" file="src/include/datastructs/utils.hpp" line="21" col="1" hash="6553149667304664611"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="src/include/filedescriptor.hpp:21:10" my-argnr="2" my-argname="p_buffer" file="src/filedescriptor.cpp" line="39" col="3" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="readFS" lineNumber="36"/>
    <functioncall functionName="CONT"/>
    <functioncall functionName="ELF_INVALID"/>
    <functioncall functionName="ELF_VALID"/>
    <functioncall functionName="EMPTY"/>
    <functioncall functionName="FOUND"/>
    <functioncall functionName="FS"/>
    <functioncall functionName="FULL"/>
    <functioncall functionName="FileDescriptor"/>
    <functioncall functionName="NOT_FOUND"/>
    <functioncall functionName="OPEN_FAIL"/>
    <functioncall functionName="OPEN_SUCCESS"/>
    <functioncall functionName="O_RDONLY"/>
    <functioncall functionName="PID_NOT_FOUND"/>
    <functioncall functionName="PID_NOT_READ"/>
    <functioncall functionName="PID_SUCCESS"/>
    <functioncall functionName="READ_FAIL"/>
    <functioncall functionName="READ_SUCCESS"/>
    <functioncall functionName="STOPPED"/>
    <functioncall functionName="WRITE_FAIL"/>
    <functioncall functionName="WRITE_SUCCESS"/>
    <functioncall functionName="break"/>
    <functioncall functionName="buffer"/>
    <functioncall functionName="clear"/>
    <functioncall functionName="close"/>
    <functioncall functionName="data"/>
    <functioncall functionName="false"/>
    <functioncall functionName="if"/>
    <functioncall functionName="long"/>
    <functioncall functionName="memset"/>
    <functioncall functionName="name"/>
    <functioncall functionName="nblock"/>
    <functioncall functionName="open"/>
    <functioncall functionName="p_blockm"/>
    <functioncall functionName="p_name"/>
    <functioncall functionName="p_nblock"/>
    <functioncall functionName="read"/>
    <functioncall functionName="reserve"/>
    <functioncall functionName="runtime_error"/>
    <functioncall functionName="size"/>
    <functioncall functionName="string"/>
    <functioncall functionName="while"/>
  </FileInfo>
</analyzerinfo>
